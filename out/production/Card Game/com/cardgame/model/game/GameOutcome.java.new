package com.cardgame.model.game;

import java.awt.image.BufferedImage;

/**
 * Manages the animated punishments shown when a player loses the game
 */
public class GameOutcome extends AbstractGameOutcome {
    
    private static final GameOutcome instance = new GameOutcome();
    
    /**
     * Private constructor to enforce singleton pattern
     */
    private GameOutcome() {
        // Private constructor to enforce singleton pattern
    }
    
    /**
     * Gets the singleton instance of GameOutcome
     * 
     * @return The singleton instance
     */
    public static GameOutcome getInstance() {
        return instance;
    }
    
    /**
     * Loads all punishment animations
     */
    @Override
    public void loadAnimations() {
        if (!animations.isEmpty()) {
            return; // Already loaded
        }

        // Add all punishment animations
        animations.add(new PhysicalLabor());
        animations.add(new PublicHumiliation());
        animations.add(new FinancialRuin());
        animations.add(new SocialRejection());
        animations.add(new NightmareSequence());
        animations.add(new JobLoss());
        animations.add(new AcademicFailure());
        animations.add(new RelationshipBreakup());
    }
    
    /**
     * Static method to get a random outcome image (for backward compatibility)
     * 
     * @return A random outcome image for the current animation frame
     */
    public static BufferedImage getRandomOutcomeImageStatic() {
        return instance.getRandomOutcomeImage();
    }
    
    /**
     * Static method to reset animation (for backward compatibility)
     */
    public static void resetAnimationStatic() {
        instance.resetAnimation();
    }
    
    /**
     * Static method to load outcome images (for backward compatibility)
     */
    public static void loadOutcomeImages() {
        instance.loadAnimations();
    }
}
